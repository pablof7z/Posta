name: Build and Test

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    name: Build and Test
    runs-on: macos-14
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Select Xcode
      run: sudo xcode-select -s /Applications/Xcode_15.4.app
    
    - name: Cache Swift Package Manager
      uses: actions/cache@v4
      with:
        path: |
          ~/Library/Developer/Xcode/DerivedData/**/SourcePackages
          ~/Library/Caches/org.swift.swiftpm
        key: ${{ runner.os }}-spm-${{ hashFiles('**/Package.resolved') }}
        restore-keys: |
          ${{ runner.os }}-spm-
    
    - name: Install dependencies
      run: |
        brew install xcodegen
        brew install xcbeautify
    
    - name: Generate Xcode project
      run: ./refresh-project.sh
    
    - name: Build for testing
      run: |
        xcodebuild build-for-testing \
          -project Posta.xcodeproj \
          -scheme Posta \
          -configuration Debug \
          -destination "platform=iOS Simulator,name=iPhone 15 Pro" \
          -derivedDataPath build/DerivedData \
          CODE_SIGN_IDENTITY="" \
          CODE_SIGNING_REQUIRED=NO \
          | xcbeautify
    
    - name: Run tests
      run: |
        xcodebuild test-without-building \
          -project Posta.xcodeproj \
          -scheme Posta \
          -configuration Debug \
          -destination "platform=iOS Simulator,name=iPhone 15 Pro" \
          -derivedDataPath build/DerivedData \
          -resultBundlePath build/TestResults \
          | xcbeautify
      continue-on-error: true
    
    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results
        path: build/TestResults
    
    - name: Lint code
      run: |
        if [ -f "Mintfile" ]; then
          brew install mint
          mint bootstrap
          mint run swiftlint
        fi
      continue-on-error: true